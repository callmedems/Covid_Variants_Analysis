# EVIDENCIA 1 - PARTE 2
# DEMMI ELIZABETH ZEPEDA RUBIO - A01709619
library('BiocManager')
library('Biostrings')
# mostrar las rutas
rutaSARS_UNO <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanKAZS162023 surface glycoprotein (S) gene.fasta"
rutaSARS_DOS <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanKAZS152023 surface glycoprotein (S) gene.fasta"
rutaSARS_TRES <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanUSANY-CDC-QDX950284662024.fasta"
rutaSARS_CUATRO <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanUSACA-CDC-QDX949667092024.fasta"
rutaSARS_CINCO <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanUSANY-CDC-QDX948979042024.fasta"
# leer las secuencias desde los archivos fasta
secuenciaSARS_UNO<- readDNAStringSet(rutaSARS_UNO)
secuenciaSARS_DOS <- readDNAStringSet(rutaSARS_DOS)
secuenciaSARS_TRES <- readDNAStringSet(rutaSARS_TRES)
secuenciaSARS_CUATRO <- readDNAStringSet(rutaSARS_CUATRO)
secuenciaSARS_CINCO <- readDNAStringSet(rutaSARS_CINCO)
# una lista para después llamar a las secuencias en las funciones
secuencias <- list(secuenciaSARS_UNO, secuenciaSARS_DOS, secuenciaSARS_TRES, secuenciaSARS_CUATRO, secuenciaSARS_CINCO)
# calcula la longitud de las secuencias de cada variante
{longitud_calc <- function(secuencia, numero){
longitudes <- sapply(seq_along(secuencia), function(i) {
length <- nchar(gsub("[\n-]", "", secuencia[i]))
cat("Longitud de secuencia SARS", numero, ": ", length, "\n")
return(length)
})
return(longitudes)
}
# para imprimirlo uniforme
for (i in 1:5) {
longitud_calc(secuencias[[i]], i)}
}
# Bases de ADN
# para la gráfica
nucleotidos_calc_graph <- function(secuencia){
nucleotidos_graph <- c("A", "c", "G", "T")
freq_nucleotidos_graph <- alphabetFrequency(secuencia, baseOnly = TRUE)
names(freq_nucleotidos_graph) <- nucleotidos_graph
return(freq_nucleotidos_graph)
}
variantes <- c("SARS 1", "SARS 2", "SARS 3", "SARS 4", "SARS 5")
bases <- sapply(secuencias, nucleotidos_calc_graph)
{barplot(
t(bases),
beside = TRUE,
legend.text = variantes,
args.legend = list(x = "topright", bty = "n"),
col = c("blue", "red", "green", "orange", "purple"),
ylim = c(0, 10000),
main = "Comparación de nucleótidos en variantes del virus SARS-CoV-2",
xlab = "Nucleótidos",
ylab = "Cantidad",
yaxt = "n" # Evita que se dibujen las mediciones predeterminadas del eje y
)}
axis(2, at = seq(0, 10000, by = 1000), labels = seq(0, 10000, by = 1000))
# ¿Cuál es el %GC de cada variante?
{nucleotidos_calc <- function(secuencia, numero){
nucleotidos <- c("A", "C", "G", "T")
freq_nucleotidos <- alphabetFrequency(secuencia, baseOnly = TRUE)
names(freq_nucleotidos) <- nucleotidos
cat("En secuencia SARS ", numero, ":\n", sep = "")
for (n in nucleotidos){
cat(n, ": ", freq_nucleotidos[[n]], "\n", sep = "")
}
cat("\n")
}
# para imprimirlo y se vea uniforme
for (i in 1:5) {
nucleotidos_calc(secuencias[[i]], i)}
}
{porcentajeGC <- function(secuencia, numero){
nucleotidos <- c("A", "C", "G", "T")
freq_nucleotidos <- alphabetFrequency(secuencia, baseOnly = TRUE)
names(freq_nucleotidos) <- nucleotidos
totalbases <- sum(freq_nucleotidos)
sumadeGC <- sum(freq_nucleotidos[2],freq_nucleotidos[3])
porcentaje <- (sumadeGC/totalbases)*100
cat("En secuencia SARS ", numero, ":\n", sep = "")
cat("C: ", freq_nucleotidos[2], "\nG: ", freq_nucleotidos[3], "\nPorcentaje de GC: ", porcentaje, "%\n")
cat("\n")
}
# para imprimirlo y se vea uniforme
for (i in 1:5) {
nucleotidos_sec <- porcentajeGC(secuencias[[i]], i)}
}
# secuencias contrasentido
{contrasentido <- function(secuencia, numero) {
contrasentido_sec <- reverseComplement(secuencia)
cat("Secuencia contrasentido de SARS ", numero, ":\n")
print(contrasentido_sec)
cat("\n")
}
for (i in 1:5) {
contrasentido(secuencias[[i]], i)}
}
plot(cars)
```{r}
plot(cars)
# EVIDENCIA 1 - PARTE 2
# DEMMI ELIZABETH ZEPEDA RUBIO - A01709619
library('BiocManager')
library('Biostrings')
# mostrar las rutas
rutaSARS_UNO <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanKAZS162023 surface glycoprotein (S) gene.fasta"
rutaSARS_DOS <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanKAZS152023 surface glycoprotein (S) gene.fasta"
rutaSARS_TRES <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanUSANY-CDC-QDX950284662024.fasta"
rutaSARS_CUATRO <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanUSACA-CDC-QDX949667092024.fasta"
rutaSARS_CINCO <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanUSANY-CDC-QDX948979042024.fasta"
# leer las secuencias desde los archivos fasta
secuenciaSARS_UNO<- readDNAStringSet(rutaSARS_UNO)
secuenciaSARS_DOS <- readDNAStringSet(rutaSARS_DOS)
secuenciaSARS_TRES <- readDNAStringSet(rutaSARS_TRES)
secuenciaSARS_CUATRO <- readDNAStringSet(rutaSARS_CUATRO)
secuenciaSARS_CINCO <- readDNAStringSet(rutaSARS_CINCO)
# una lista para después llamar a las secuencias en las funciones
secuencias <- list(secuenciaSARS_UNO, secuenciaSARS_DOS, secuenciaSARS_TRES, secuenciaSARS_CUATRO, secuenciaSARS_CINCO)
# calcula la longitud de las secuencias de cada variante
{longitud_calc <- function(secuencia, numero){
longitudes <- sapply(seq_along(secuencia), function(i) {
length <- nchar(gsub("[\n-]", "", secuencia[i]))
cat("Longitud de secuencia SARS", numero, ": ", length, "\n")
return(length)
})
return(longitudes)
}
# para imprimirlo uniforme
for (i in 1:5) {
longitud_calc(secuencias[[i]], i)}
}
# Bases de ADN
# para la gráfica
nucleotidos_calc_graph <- function(secuencia){
nucleotidos_graph <- c("A", "c", "G", "T")
freq_nucleotidos_graph <- alphabetFrequency(secuencia, baseOnly = TRUE)
names(freq_nucleotidos_graph) <- nucleotidos_graph
return(freq_nucleotidos_graph)
}
variantes <- c("SARS 1", "SARS 2", "SARS 3", "SARS 4", "SARS 5")
bases <- sapply(secuencias, nucleotidos_calc_graph)
{barplot(
t(bases),
beside = TRUE,
legend.text = variantes,
args.legend = list(x = "topright", bty = "n"),
col = c("blue", "red", "green", "orange", "purple"),
ylim = c(0, 10000),
main = "Comparación de nucleótidos en variantes del virus SARS-CoV-2",
xlab = "Nucleótidos",
ylab = "Cantidad",
yaxt = "n" # Evita que se dibujen las mediciones predeterminadas del eje y
)}
axis(2, at = seq(0, 10000, by = 1000), labels = seq(0, 10000, by = 1000))
# ¿Cuál es el %GC de cada variante?
{nucleotidos_calc <- function(secuencia, numero){
nucleotidos <- c("A", "C", "G", "T")
freq_nucleotidos <- alphabetFrequency(secuencia, baseOnly = TRUE)
names(freq_nucleotidos) <- nucleotidos
cat("En secuencia SARS ", numero, ":\n", sep = "")
for (n in nucleotidos){
cat(n, ": ", freq_nucleotidos[[n]], "\n", sep = "")
}
cat("\n")
}
# para imprimirlo y se vea uniforme
for (i in 1:5) {
nucleotidos_calc(secuencias[[i]], i)}
}
{porcentajeGC <- function(secuencia, numero){
nucleotidos <- c("A", "C", "G", "T")
freq_nucleotidos <- alphabetFrequency(secuencia, baseOnly = TRUE)
names(freq_nucleotidos) <- nucleotidos
totalbases <- sum(freq_nucleotidos)
sumadeGC <- sum(freq_nucleotidos[2],freq_nucleotidos[3])
porcentaje <- (sumadeGC/totalbases)*100
cat("En secuencia SARS ", numero, ":\n", sep = "")
cat("C: ", freq_nucleotidos[2], "\nG: ", freq_nucleotidos[3], "\nPorcentaje de GC: ", porcentaje, "%\n")
cat("\n")
}
# para imprimirlo y se vea uniforme
for (i in 1:5) {
nucleotidos_sec <- porcentajeGC(secuencias[[i]], i)}
}
# secuencias contrasentido
{contrasentido <- function(secuencia, numero) {
contrasentido_sec <- reverseComplement(secuencia)
cat("Secuencia contrasentido de SARS ", numero, ":\n")
print(contrasentido_sec)
cat("\n")
}
for (i in 1:5) {
contrasentido(secuencias[[i]], i)}
}
# EVIDENCIA 1 - PARTE 2
# DEMMI ELIZABETH ZEPEDA RUBIO - A01709619
library('BiocManager')
library('Biostrings')
# mostrar las rutas
rutaSARS_UNO <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanKAZS162023 surface glycoprotein (S) gene.fasta"
rutaSARS_DOS <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanKAZS152023 surface glycoprotein (S) gene.fasta"
rutaSARS_TRES <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanUSANY-CDC-QDX950284662024.fasta"
rutaSARS_CUATRO <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanUSACA-CDC-QDX949667092024.fasta"
rutaSARS_CINCO <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanUSANY-CDC-QDX948979042024.fasta"
# leer las secuencias desde los archivos fasta
secuenciaSARS_UNO<- readDNAStringSet(rutaSARS_UNO)
secuenciaSARS_DOS <- readDNAStringSet(rutaSARS_DOS)
secuenciaSARS_TRES <- readDNAStringSet(rutaSARS_TRES)
secuenciaSARS_CUATRO <- readDNAStringSet(rutaSARS_CUATRO)
secuenciaSARS_CINCO <- readDNAStringSet(rutaSARS_CINCO)
# una lista para después llamar a las secuencias en las funciones
secuencias <- list(secuenciaSARS_UNO, secuenciaSARS_DOS, secuenciaSARS_TRES, secuenciaSARS_CUATRO, secuenciaSARS_CINCO)
# calcula la longitud de las secuencias de cada variante
{longitud_calc <- function(secuencia, numero){
longitudes <- sapply(seq_along(secuencia), function(i) {
length <- nchar(gsub("[\n-]", "", secuencia[i]))
cat("Longitud de secuencia SARS", numero, ": ", length, "\n")
return(length)
})
return(longitudes)
}
# para imprimirlo uniforme
for (i in 1:5) {
longitud_calc(secuencias[[i]], i)}
}
# Bases de ADN
# para la gráfica
nucleotidos_calc_graph <- function(secuencia){
nucleotidos_graph <- c("A", "c", "G", "T")
freq_nucleotidos_graph <- alphabetFrequency(secuencia, baseOnly = TRUE)
names(freq_nucleotidos_graph) <- nucleotidos_graph
return(freq_nucleotidos_graph)
}
variantes <- c("SARS 1", "SARS 2", "SARS 3", "SARS 4", "SARS 5")
bases <- sapply(secuencias, nucleotidos_calc_graph)
{barplot(
t(bases),
beside = TRUE,
legend.text = variantes,
args.legend = list(x = "topright", bty = "n"),
col = c("blue", "red", "green", "orange", "purple"),
ylim = c(0, 10000),
main = "Comparación de bases en variantes del virus SARS-CoV-2",
xlab = "Nucleótidos",
ylab = "Cantidad",
yaxt = "n" #Evita que se dibujen las mediciones predeterminadas del eje y
)}
axis(2, at = seq(0, 10000, by = 1000), labels = seq(0, 10000, by = 1000))
# ¿Cuál es el %GC de cada variante?
{nucleotidos_calc <- function(secuencia, numero){
nucleotidos <- c("A", "C", "G", "T")
freq_nucleotidos <- alphabetFrequency(secuencia, baseOnly = TRUE)
names(freq_nucleotidos) <- nucleotidos
cat("En secuencia SARS ", numero, ":\n", sep = "")
for (n in nucleotidos){
cat(n, ": ", freq_nucleotidos[[n]], "\n", sep = "")
}
cat("\n")
}
# para imprimirlo y se vea uniforme
for (i in 1:5) {
nucleotidos_calc(secuencias[[i]], i)}
}
{porcentajeGC <- function(secuencia, numero){
nucleotidos <- c("A", "C", "G", "T")
freq_nucleotidos <- alphabetFrequency(secuencia, baseOnly = TRUE)
names(freq_nucleotidos) <- nucleotidos
totalbases <- sum(freq_nucleotidos)
sumadeGC <- sum(freq_nucleotidos[2],freq_nucleotidos[3])
porcentaje <- (sumadeGC/totalbases)*100
cat("En secuencia SARS ", numero, ":\n", sep = "")
cat("C: ", freq_nucleotidos[2], "\nG: ", freq_nucleotidos[3], "\nPorcentaje de GC: ", porcentaje, "%\n")
cat("\n")
}
# para imprimirlo y se vea uniforme
for (i in 1:5) {
nucleotidos_sec <- porcentajeGC(secuencias[[i]], i)}
}
# secuencias contrasentido
{contrasentido <- function(secuencia, numero) {
contrasentido_sec <- reverseComplement(secuencia)
cat("Secuencia contrasentido de SARS ", numero, ":\n")
print(contrasentido_sec)
cat("\n")
}
for (i in 1:5) {
contrasentido(secuencias[[i]], i)}
}
# EVIDENCIA 1 - PARTE 2
# DEMMI ELIZABETH ZEPEDA RUBIO - A01709619
library('BiocManager')
library('Biostrings')
# mostrar las rutas
rutaSARS_UNO <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanKAZS162023 surface glycoprotein (S) gene.fasta"
rutaSARS_DOS <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanKAZS152023 surface glycoprotein (S) gene.fasta"
rutaSARS_TRES <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanUSANY-CDC-QDX950284662024.fasta"
rutaSARS_CUATRO <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanUSACA-CDC-QDX949667092024.fasta"
rutaSARS_CINCO <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanUSANY-CDC-QDX948979042024.fasta"
# leer las secuencias desde los archivos fasta
secuenciaSARS_UNO<- readDNAStringSet(rutaSARS_UNO)
secuenciaSARS_DOS <- readDNAStringSet(rutaSARS_DOS)
secuenciaSARS_TRES <- readDNAStringSet(rutaSARS_TRES)
secuenciaSARS_CUATRO <- readDNAStringSet(rutaSARS_CUATRO)
secuenciaSARS_CINCO <- readDNAStringSet(rutaSARS_CINCO)
# una lista para después llamar a las secuencias en las funciones
secuencias <- list(secuenciaSARS_UNO, secuenciaSARS_DOS, secuenciaSARS_TRES, secuenciaSARS_CUATRO, secuenciaSARS_CINCO)
# calcula la longitud de las secuencias de cada variante
{longitud_calc <- function(secuencia, numero){
longitudes <- sapply(seq_along(secuencia), function(i) {
length <- nchar(gsub("[\n-]", "", secuencia[i]))
cat("Longitud de secuencia SARS", numero, ": ", length, "\n")
return(length)
})
return(longitudes)
}
# para imprimirlo uniforme
for (i in 1:5) {
longitud_calc(secuencias[[i]], i)}
}
# Bases de ADN
# para la gráfica
nucleotidos_calc_graph <- function(secuencia){
nucleotidos_graph <- c("A", "c", "G", "T")
freq_nucleotidos_graph <- alphabetFrequency(secuencia, baseOnly = TRUE)
names(freq_nucleotidos_graph) <- nucleotidos_graph
return(freq_nucleotidos_graph)
}
variantes <- c("SARS 1", "SARS 2", "SARS 3", "SARS 4", "SARS 5")
bases <- sapply(secuencias, nucleotidos_calc_graph)
{barplot(
t(bases),
beside = TRUE,
legend.text = variantes,
args.legend = list(x = "topright", bty = "n"),
col = c("blue", "red", "green", "orange", "purple"),
ylim = c(0, 10000),
main = "Comparación de nucleótidos en variantes del virus SARS-CoV-2",
xlab = "Nucleótidos",
ylab = "Cantidad",
yaxt = "n" #Evita que se dibujen las mediciones predeterminadas del eje y
)}
axis(2, at = seq(0, 10000, by = 1000), labels = seq(0, 10000, by = 1000))
# ¿Cuál es el %GC de cada variante?
{nucleotidos_calc <- function(secuencia, numero){
nucleotidos <- c("A", "C", "G", "T")
freq_nucleotidos <- alphabetFrequency(secuencia, baseOnly = TRUE)
names(freq_nucleotidos) <- nucleotidos
cat("En secuencia SARS ", numero, ":\n", sep = "")
for (n in nucleotidos){
cat(n, ": ", freq_nucleotidos[[n]], "\n", sep = "")
}
cat("\n")
}
# para imprimirlo y se vea uniforme
for (i in 1:5) {
nucleotidos_calc(secuencias[[i]], i)}
}
{porcentajeGC <- function(secuencia, numero){
nucleotidos <- c("A", "C", "G", "T")
freq_nucleotidos <- alphabetFrequency(secuencia, baseOnly = TRUE)
names(freq_nucleotidos) <- nucleotidos
totalbases <- sum(freq_nucleotidos)
sumadeGC <- sum(freq_nucleotidos[2],freq_nucleotidos[3])
porcentaje <- (sumadeGC/totalbases)*100
cat("En secuencia SARS ", numero, ":\n", sep = "")
cat("C: ", freq_nucleotidos[2], "\nG: ", freq_nucleotidos[3], "\nPorcentaje de GC: ", porcentaje, "%\n")
cat("\n")
}
# para imprimirlo y se vea uniforme
for (i in 1:5) {
nucleotidos_sec <- porcentajeGC(secuencias[[i]], i)}
}
# secuencias contrasentido
{contrasentido <- function(secuencia, numero) {
contrasentido_sec <- reverseComplement(secuencia)
cat("Secuencia contrasentido de SARS ", numero, ":\n")
print(contrasentido_sec)
cat("\n")
}
for (i in 1:5) {
contrasentido(secuencias[[i]], i)}
}
# EVIDENCIA 1 - PARTE 2
# DEMMI ELIZABETH ZEPEDA RUBIO - A01709619
library('BiocManager')
library('Biostrings')
# mostrar las rutas
rutaSARS_UNO <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanKAZS162023 surface glycoprotein (S) gene.fasta"
rutaSARS_DOS <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanKAZS152023 surface glycoprotein (S) gene.fasta"
rutaSARS_TRES <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanUSANY-CDC-QDX950284662024.fasta"
rutaSARS_CUATRO <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanUSACA-CDC-QDX949667092024.fasta"
rutaSARS_CINCO <- "D:\\demmi\\Documents\\R Codes\\Evidencia1\\sequenceSARS-CoV-2humanUSANY-CDC-QDX948979042024.fasta"
# leer las secuencias desde los archivos fasta
secuenciaSARS_UNO<- readDNAStringSet(rutaSARS_UNO)
secuenciaSARS_DOS <- readDNAStringSet(rutaSARS_DOS)
secuenciaSARS_TRES <- readDNAStringSet(rutaSARS_TRES)
secuenciaSARS_CUATRO <- readDNAStringSet(rutaSARS_CUATRO)
secuenciaSARS_CINCO <- readDNAStringSet(rutaSARS_CINCO)
# una lista para después llamar a las secuencias en las funciones
secuencias <- list(secuenciaSARS_UNO, secuenciaSARS_DOS, secuenciaSARS_TRES, secuenciaSARS_CUATRO, secuenciaSARS_CINCO)
# calcula la longitud de las secuencias de cada variante
{longitud_calc <- function(secuencia, numero){
longitudes <- sapply(seq_along(secuencia), function(i) {
length <- nchar(gsub("[\n-]", "", secuencia[i]))
cat("Longitud de secuencia SARS", numero, ": ", length, "\n")
return(length)
})
return(longitudes)
}
# para imprimirlo uniforme
for (i in 1:5) {
longitud_calc(secuencias[[i]], i)}
}
# Bases de ADN
# para la gráfica
nucleotidos_calc_graph <- function(secuencia){
nucleotidos_graph <- c("A", "C", "G", "T")
freq_nucleotidos_graph <- alphabetFrequency(secuencia, baseOnly = TRUE)
names(freq_nucleotidos_graph) <- nucleotidos_graph
return(freq_nucleotidos_graph)
}
variantes <- c("SARS 1", "SARS 2", "SARS 3", "SARS 4", "SARS 5")
bases <- sapply(secuencias, nucleotidos_calc_graph)
{barplot(
t(bases),
beside = TRUE,
legend.text = variantes,
args.legend = list(x = "topright", bty = "n"),
col = c("blue", "red", "green", "orange", "purple"),
ylim = c(0, 10000),
main = "Comparación de nucleótidos en variantes del virus SARS-CoV-2",
xlab = "Nucleótidos",
ylab = "Cantidad",
yaxt = "n" #Evita que se dibujen las mediciones predeterminadas del eje y
)}
axis(2, at = seq(0, 10000, by = 1000), labels = seq(0, 10000, by = 1000))
# ¿Cuál es el %GC de cada variante?
{nucleotidos_calc <- function(secuencia, numero){
nucleotidos <- c("A", "C", "G", "T")
freq_nucleotidos <- alphabetFrequency(secuencia, baseOnly = TRUE)
names(freq_nucleotidos) <- nucleotidos
cat("En secuencia SARS ", numero, ":\n", sep = "")
for (n in nucleotidos){
cat(n, ": ", freq_nucleotidos[[n]], "\n", sep = "")
}
cat("\n")
}
# para imprimirlo y se vea uniforme
for (i in 1:5) {
nucleotidos_calc(secuencias[[i]], i)}
}
{porcentajeGC <- function(secuencia, numero){
nucleotidos <- c("A", "C", "G", "T")
freq_nucleotidos <- alphabetFrequency(secuencia, baseOnly = TRUE)
names(freq_nucleotidos) <- nucleotidos
totalbases <- sum(freq_nucleotidos)
sumadeGC <- sum(freq_nucleotidos[2],freq_nucleotidos[3])
porcentaje <- (sumadeGC/totalbases)*100
cat("En secuencia SARS ", numero, ":\n", sep = "")
cat("C: ", freq_nucleotidos[2], "\nG: ", freq_nucleotidos[3], "\nPorcentaje de GC: ", porcentaje, "%\n")
cat("\n")
}
# para imprimirlo y se vea uniforme
for (i in 1:5) {
nucleotidos_sec <- porcentajeGC(secuencias[[i]], i)}
}
# secuencias contrasentido
{contrasentido <- function(secuencia, numero) {
contrasentido_sec <- reverseComplement(secuencia)
cat("Secuencia contrasentido de SARS ", numero, ":\n")
print(contrasentido_sec)
cat("\n")
}
for (i in 1:5) {
contrasentido(secuencias[[i]], i)}
}
